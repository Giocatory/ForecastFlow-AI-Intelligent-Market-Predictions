import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from auth import render_auth_sidebar
from api_clients import AvitoAPIClient, HHAPIClient, get_available_regions, get_available_languages
from models import create_apartment_forecast, create_salary_forecast

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üìä –ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

def render_apartment_forecast():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ü–µ–Ω –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã"""
    st.header("üè† –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        region = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω", get_available_regions(), key="apartment_region")
        rooms = st.selectbox("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", ["1", "2", "3", "4+"], key="apartment_rooms")
    
    with col2:
        period = st.slider("–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö (–º–µ—Å—è—Ü—ã)", 6, 60, 24, key="apartment_period")
        forecast_months = st.slider("–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–º–µ—Å—è—Ü—ã)", 3, 24, 12, key="apartment_forecast")
    
    # –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
    model_complexity = st.selectbox(
        "–°–ª–æ–∂–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π",
        ["simple", "medium", "complex", "all"],
        index=1,
        format_func=lambda x: {
            "simple": "üü¢ –ü—Ä–æ—Å—Ç—ã–µ (–±—ã—Å—Ç—Ä–æ)",
            "medium": "üü° –°—Ä–µ–¥–Ω–∏–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", 
            "complex": "üü† –°–ª–æ–∂–Ω—ã–µ (–º–µ–¥–ª–µ–Ω–Ω–µ–µ)",
            "all": "üî¥ –í—Å–µ –º–æ–¥–µ–ª–∏ (–æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ)"
        }[x],
        key="apartment_model_complexity"
    )
    
    if st.button("üìà –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", key="apartment_btn"):
        if 'avito' not in st.session_state.tokens:
            st.warning("‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Avito API —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–ª–µ–≤–∞.")
            return
        
        with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API..."):
            client = AvitoAPIClient(st.session_state.tokens['avito'])
            data = client.get_apartment_prices(region, rooms, period)
            
            if data is not None:
                st.success(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                st.subheader("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
                st.dataframe(data.tail(10), width='stretch')
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                col_stat1, col_stat2, col_stat3 = st.columns(3)
                with col_stat1:
                    st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{data['price'].mean():,.0f} ‚ÇΩ")
                with col_stat2:
                    st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{data['price'].min():,.0f} ‚ÇΩ")
                with col_stat3:
                    st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{data['price'].max():,.0f} ‚ÇΩ")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
                with st.spinner("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞..."):
                    forecast, model, success = create_apartment_forecast(data, forecast_months, model_complexity)
                    
                    if success and forecast is not None:
                        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                        fig = make_subplots(
                            rows=1, cols=1,
                            subplot_titles=[f"–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã ({region}, {rooms} –∫–æ–º.)"]
                        )
                        
                        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                        fig.add_trace(
                            go.Scatter(
                                x=data['date'], 
                                y=data['price'], 
                                name='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', 
                                line=dict(color='blue', width=2),
                                mode='lines+markers'
                            )
                        )
                        
                        # –ü—Ä–æ–≥–Ω–æ–∑
                        forecast_dates = forecast.index
                        forecast_values = forecast.iloc[:, 0]
                        
                        fig.add_trace(
                            go.Scatter(
                                x=forecast_dates, 
                                y=forecast_values, 
                                name='–ü—Ä–æ–≥–Ω–æ–∑', 
                                line=dict(color='red', width=2, dash='dash'),
                                mode='lines+markers'
                            )
                        )
                        
                        # –û–±–ª–∞—Å—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
                        try:
                            if hasattr(model.model, 'prediction_intervals'):
                                upper_bound = forecast_values * 1.1  # –ü—Ä–∏–º–µ—Ä: +10%
                                lower_bound = forecast_values * 0.9  # –ü—Ä–∏–º–µ—Ä: -10%
                                
                                fig.add_trace(
                                    go.Scatter(
                                        x=forecast_dates.tolist() + forecast_dates.tolist()[::-1],
                                        y=upper_bound.tolist() + lower_bound.tolist()[::-1],
                                        fill='toself',
                                        fillcolor='rgba(255,0,0,0.2)',
                                        line=dict(color='rgba(255,255,255,0)'),
                                        name='–î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–æ–≥–Ω–æ–∑–∞'
                                    )
                                )
                        except:
                            pass
                        
                        fig.update_layout(
                            xaxis_title="–î–∞—Ç–∞",
                            yaxis_title="–¶–µ–Ω–∞ (—Ä—É–±)",
                            height=500,
                            showlegend=True
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
                        if hasattr(model, 'get_model_info'):
                            model_info = model.get_model_info()
                            st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
                            col_info1, col_info2 = st.columns(2)
                            with col_info1:
                                st.write(f"**–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å:** {model_info.get('best_model', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                                st.write(f"**–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {model_info.get('model_complexity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                            with col_info2:
                                st.write(f"**–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:** {model_info.get('forecast_length', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} –º–µ—Å—è—Ü–µ–≤")
                                if 'best_score' in model_info:
                                    st.write(f"**–¢–æ—á–Ω–æ—Å—Ç—å (RMSE):** {model_info['best_score']:.2f}")
                        
                        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –≤ —Ç–∞–±–ª–∏—Ü–µ
                        st.subheader("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                        forecast_df = forecast.reset_index()
                        forecast_df.columns = ['–î–∞—Ç–∞', '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞']
                        forecast_df['–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞'] = forecast_df['–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞'].round(2)
                        st.dataframe(forecast_df, width='stretch')
                        
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
                        csv = forecast_df.to_csv(index=False).encode('utf-8')
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∫–∞–∫ CSV",
                            data=csv,
                            file_name=f"–ø—Ä–æ–≥–Ω–æ–∑_–∫–≤–∞—Ä—Ç–∏—Ä—ã_{region}_{rooms}–∫_{pd.Timestamp.now().strftime('%Y%m%d')}.csv",
                            mime='text/csv',
                        )
                    else:
                        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö.")

def render_salary_forecast():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞—Ä–ø–ª–∞—Ç"""
    st.header("üíº –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        language = st.selectbox("–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", get_available_languages(), key="salary_language")
    
    with col2:
        period = st.slider("–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö (–º–µ—Å—è—Ü—ã)", 6, 60, 24, key="salary_period")
        forecast_months = st.slider("–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–º–µ—Å—è—Ü—ã)", 3, 24, 12, key="salary_forecast")
    
    # –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
    model_complexity = st.selectbox(
        "–°–ª–æ–∂–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π",
        ["simple", "medium", "complex", "all"],
        index=1,
        format_func=lambda x: {
            "simple": "üü¢ –ü—Ä–æ—Å—Ç—ã–µ (–±—ã—Å—Ç—Ä–æ)",
            "medium": "üü° –°—Ä–µ–¥–Ω–∏–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", 
            "complex": "üü† –°–ª–æ–∂–Ω—ã–µ (–º–µ–¥–ª–µ–Ω–Ω–µ–µ)",
            "all": "üî¥ –í—Å–µ –º–æ–¥–µ–ª–∏ (–æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ)"
        }[x],
        key="salary_model_complexity"
    )
    
    if st.button("üìä –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", key="salary_btn"):
        if 'hh' not in st.session_state.tokens:
            st.warning("‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Å HH API —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–ª–µ–≤–∞.")
            return
        
        with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API..."):
            client = HHAPIClient(st.session_state.tokens['hh'])
            data = client.get_salary_data(language, period)
            
            if data is not None:
                st.success(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                st.subheader("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
                st.dataframe(data.tail(10), width='stretch')
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                col_stat1, col_stat2, col_stat3 = st.columns(3)
                with col_stat1:
                    st.metric("–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞", f"{data['salary'].mean():,.0f} ‚ÇΩ")
                with col_stat2:
                    st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞", f"{data['salary'].min():,.0f} ‚ÇΩ")
                with col_stat3:
                    st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞", f"{data['salary'].max():,.0f} ‚ÇΩ")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
                with st.spinner("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞..."):
                    forecast, model, success = create_salary_forecast(data, forecast_months, model_complexity)
                    
                    if success and forecast is not None:
                        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                        fig = make_subplots(
                            rows=1, cols=1,
                            subplot_titles=[f"–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞—Ä–ø–ª–∞—Ç –¥–ª—è {language} —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"]
                        )
                        
                        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                        fig.add_trace(
                            go.Scatter(
                                x=data['date'], 
                                y=data['salary'], 
                                name='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', 
                                line=dict(color='green', width=2),
                                mode='lines+markers'
                            )
                        )
                        
                        # –ü—Ä–æ–≥–Ω–æ–∑
                        forecast_dates = forecast.index
                        forecast_values = forecast.iloc[:, 0]
                        
                        fig.add_trace(
                            go.Scatter(
                                x=forecast_dates, 
                                y=forecast_values, 
                                name='–ü—Ä–æ–≥–Ω–æ–∑', 
                                line=dict(color='orange', width=2, dash='dash'),
                                mode='lines+markers'
                            )
                        )
                        
                        # –û–±–ª–∞—Å—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                        try:
                            upper_bound = forecast_values * 1.1
                            lower_bound = forecast_values * 0.9
                            
                            fig.add_trace(
                                go.Scatter(
                                    x=forecast_dates.tolist() + forecast_dates.tolist()[::-1],
                                    y=upper_bound.tolist() + lower_bound.tolist()[::-1],
                                    fill='toself',
                                    fillcolor='rgba(255,165,0,0.2)',
                                    line=dict(color='rgba(255,255,255,0)'),
                                    name='–î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–æ–≥–Ω–æ–∑–∞'
                                )
                            )
                        except:
                            pass
                        
                        fig.update_layout(
                            xaxis_title="–î–∞—Ç–∞",
                            yaxis_title="–ó–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±)",
                            height=500,
                            showlegend=True
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
                        if hasattr(model, 'get_model_info'):
                            model_info = model.get_model_info()
                            st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
                            col_info1, col_info2 = st.columns(2)
                            with col_info1:
                                st.write(f"**–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å:** {model_info.get('best_model', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                                st.write(f"**–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {model_info.get('model_complexity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                            with col_info2:
                                st.write(f"**–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:** {model_info.get('forecast_length', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} –º–µ—Å—è—Ü–µ–≤")
                                if 'best_score' in model_info:
                                    st.write(f"**–¢–æ—á–Ω–æ—Å—Ç—å (RMSE):** {model_info['best_score']:.2f}")
                        
                        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –≤ —Ç–∞–±–ª–∏—Ü–µ
                        st.subheader("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                        forecast_df = forecast.reset_index()
                        forecast_df.columns = ['–î–∞—Ç–∞', '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞']
                        forecast_df['–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞'] = forecast_df['–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞'].round(2)
                        st.dataframe(forecast_df, width='stretch')
                        
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
                        csv = forecast_df.to_csv(index=False).encode('utf-8')
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∫–∞–∫ CSV",
                            data=csv,
                            file_name=f"–ø—Ä–æ–≥–Ω–æ–∑_–∑–∞—Ä–ø–ª–∞—Ç_{language}_{pd.Timestamp.now().strftime('%Y%m%d')}.csv",
                            mime='text/csv',
                        )
                    else:
                        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö.")

def render_demo_mode():
    """–†–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ API —Ç–æ–∫–µ–Ω–æ–≤"""
    st.info("üî∏ **–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º** - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    tab1, tab2 = st.tabs(["üè† –¶–µ–Ω—ã –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã", "üíº –ó–∞—Ä–ø–ª–∞—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"])
    
    with tab1:
        st.subheader("–î–µ–º–æ: –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã")
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            region = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω", get_available_regions(), key="demo_apartment_region")
            rooms = st.selectbox("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", ["1", "2", "3", "4+"], key="demo_apartment_rooms")
        
        with col2:
            period = st.slider("–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö (–º–µ—Å—è—Ü—ã)", 6, 60, 24, key="demo_apartment_period")
            forecast_months = st.slider("–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–º–µ—Å—è—Ü—ã)", 3, 24, 12, key="demo_apartment_forecast")
        
        model_complexity = st.selectbox(
            "–°–ª–æ–∂–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π",
            ["simple", "medium"],
            index=1,
            key="demo_apartment_model_complexity"
        )
        
        if st.button("üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ-–ø—Ä–æ–≥–Ω–æ–∑", key="demo_apartment_btn"):
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö..."):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–∫–ª–∏–µ–Ω—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
                client = AvitoAPIClient("demo-token")
                data = client.get_apartment_prices(region, rooms, period)
                
                if data is not None:
                    st.success(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data)} –¥–µ–º–æ-–∑–∞–ø–∏—Å–µ–π")
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
                    with st.spinner("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö..."):
                        forecast, model, success = create_apartment_forecast(data, forecast_months, model_complexity)
                        
                        if success and forecast is not None:
                            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ
                            fig = go.Figure()
                            fig.add_trace(go.Scatter(x=data['date'], y=data['price'], name='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ'))
                            fig.add_trace(go.Scatter(x=forecast.index, y=forecast.iloc[:, 0], name='–ü—Ä–æ–≥–Ω–æ–∑'))
                            fig.update_layout(title=f"–î–µ–º–æ-–ø—Ä–æ–≥–Ω–æ–∑: {region}, {rooms} –∫–æ–º.")
                            st.plotly_chart(fig, use_container_width=True)
                            
                            st.info("üí° –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–≤–µ–¥–∏—Ç–µ API —Ç–æ–∫–µ–Ω—ã.")
                        else:
                            st.error("–î–µ–º–æ-–ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ —É–¥–∞–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
    
    with tab2:
        st.subheader("–î–µ–º–æ: –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞—Ä–ø–ª–∞—Ç")
        
        language = st.selectbox("–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", get_available_languages(), key="demo_salary_language")
        forecast_months = st.slider("–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–º–µ—Å—è—Ü—ã)", 3, 12, 6, key="demo_salary_forecast")
        
        if st.button("üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ-–ø—Ä–æ–≥–Ω–æ–∑ –∑–∞—Ä–ø–ª–∞—Ç", key="demo_salary_btn"):
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö..."):
                client = HHAPIClient("demo-token")
                data = client.get_salary_data(language, 24)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–µ–º–æ
                
                if data is not None:
                    st.success(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data)} –¥–µ–º–æ-–∑–∞–ø–∏—Å–µ–π")
                    
                    with st.spinner("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö..."):
                        forecast, model, success = create_salary_forecast(data, forecast_months, "simple")
                        
                        if success and forecast is not None:
                            fig = go.Figure()
                            fig.add_trace(go.Scatter(x=data['date'], y=data['salary'], name='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ'))
                            fig.add_trace(go.Scatter(x=forecast.index, y=forecast.iloc[:, 0], name='–ü—Ä–æ–≥–Ω–æ–∑'))
                            fig.update_layout(title=f"–î–µ–º–æ-–ø—Ä–æ–≥–Ω–æ–∑ –∑–∞—Ä–ø–ª–∞—Ç: {language}")
                            st.plotly_chart(fig, use_container_width=True)
                            
                            st.info("üí° –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–≤–µ–¥–∏—Ç–µ API —Ç–æ–∫–µ–Ω—ã.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.title("üìä –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    is_authenticated = render_auth_sidebar()
    
    if not is_authenticated:
        st.info("üëà –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å")
        return
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.sidebar.title("üéØ –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞")
    
    app_mode = st.sidebar.radio(
        "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        ["üè† –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã", "üíº –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π", "üî∏ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"]
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    has_avito_token = 'avito' in st.session_state.tokens and st.session_state.tokens['avito']
    has_hh_token = 'hh' in st.session_state.tokens and st.session_state.tokens['hh']
    
    if app_mode == "üè† –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã":
        if not has_avito_token:
            st.warning("""
            ‚ö†Ô∏è **–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω Avito API**
            
            –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
            1. –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ [Avito –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤](https://developers.avito.ru/)
            2. –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–ª–µ–≤–∞
            
            –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ **–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º** –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
            """)
            if st.button("–ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"):
                st.session_state.demo_redirect = True
                st.rerun()
        else:
            render_apartment_forecast()
    
    elif app_mode == "üíº –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π":
        if not has_hh_token:
            st.warning("""
            ‚ö†Ô∏è **–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω HH API**
            
            –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
            1. –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ [HH.ru –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤](https://dev.hh.ru/)
            2. –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–ª–µ–≤–∞
            
            –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ **–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º** –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
            """)
            if st.button("–ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"):
                st.session_state.demo_redirect = True
                st.rerun()
        else:
            render_salary_forecast()
    
    else:  # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        render_demo_mode()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –ø–æ–¥–≤–∞–ª–µ
    st.sidebar.markdown("---")
    st.sidebar.info("""
    **–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:**
    - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ AutoTS
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π
    - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å Plotly
    """)

if __name__ == "__main__":
    main()